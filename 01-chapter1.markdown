# 새로운 상거래의 전망

## 변화하는 소비자의 요구

우리는 상업의 새로운 시대로 들어서고 있습니다. 어느 누구든지 언제 어디서나 고객으로서 원활하게 거래 해야 합니다. 모든 판매는 소비자와의 잠재적인 수십 가지 상호 작용의 절정입니다. 오늘날 밀레니엄 세대의 구매 중 스마트 폰에 의한 비중이 84%를 차지합니다. 디지털로서의 접점은 모든 구매의 56%에 영향을 받습니다. 최종 소비자에게 판매하는 행위는 불과 10년 전보다 훨씬 복잡합니다. 소비자는 구매 조건에 따라 아주 신중하게 움직입니다. 오늘날의 소비자들은 무엇을 원할까요?

### 단순한 거래가 아닌 브랜드의 경험

상거래에 종사하는 사람들은 주로 컨텐츠를 이용하여 사용자의 경험을 창조함으로써 오늘날 상품을 판매하는 시대에 살아남고 번창하고 있습니다. 소비자들은 구입하는 상품에 대해 이야기 하기를 원합니다. 상품은 단순히 상품이 아니며 소비자를 반영 합니다. 상품은 소비자를 설명 합니다. 오늘날의 브랜드는 팔고자 하는 상품을 차별화 하는데 성공 했습니다. 이는 텍스트, 비디오, 오디오 등과 같은 컨텐츠의 광범위한 사용이 필요로 합니다.

### 채널 간 경험의 일관성

소비자들은 더 이상 채널(판매시점관리, 웹, 모바일, 키오스크 등)들 간의 구분을 생각하지 않습니다. 소비자들은 브랜드와 어떠한 상호작용을 하더라도 동일한 재고 수준, 제품 분류, 가격 및 기타 측면 등을 보기를 희망합니다. 경험을 채널에 맞추는 것은 허용되는 반면에 단편화된 경험을 제공하는 것은 허용되지 않습니다.

### 부가 가치의 기능

온라인 쇼핑을 하게 되는 주요 요인은 실제 상점을 넘어서는 추가 기능 입니다. 이러한 추가 기능으로는 더 많은 상품, 등급/리뷰, 보다 심층적인 제품 설명, 추가적인 미디어(향상된 제품 사진/비디오), 관련 제품, 소셜 미디어와의 연결 등이 있습니다.

### 편리함

불과 100년 전만 해도, 실제 소매점들이 구매할 수 있는 유일한 방법이었습다. 그리고 나서, 카탈로그는 시대에 뒤떨어지게 되었습니다. 1990년대 후반, 인터넷이 보급되기 시작했고 소비자들은 웹 사이트를 통해 구매 할 수 있게 되었습니다. 나중에, 스마트폰이 2007년에 아이폰이 출시 되면서 나오게 되었습니다. 그 이후 10년 동안 스마트 워치에서 부터 인터넷이 가능한 TV에 이르기까지 시장에서 판매되는 TV의 수는 폭발적으로 증가 했습니다. 오늘날 시장에 출시된 거의 모든 인터넷이 연결된 컨슈머 전자 제품들은 소비자들이 쇼핑에 사용할 수 있는 인터페이스를 제공 합니다. 새로운 사용자 인터페이스는 매주 시장에 출시되고 있으며 성공적인 브랜드는 이러한 모든 새로운 기기에서 고유한 경험을 제공할 수 있어야 합니다.

### 이제 소매 업체(및 기타 모든 사용자)가 소프트웨어를 기반으로 운영 됩니다.

> 기술은 경제의 모든 분야에 스며들어 있습니다. 심지어 공식적으로 첨단 기술로 분류되지 않은 분야도 마찬가지 입니다. 요즘에는 모든 회사가 기술 회사 입니다. - 뉴욕 타임즈

소비자들의 수요 증가로 인해 소매 업체들이 물리적 또는 가상의 제품을 판매하는 사업의 소프트웨어 회사로서 변모하고 있습니다. 소매점의 선반 위에 제품을 배치하는 것에서 부터 전력이 공급된 창고의 자동화 로봇, 최신 애플 워치에서 실행되는 앱에 이르기까지 모든 면에서 소프트웨어로 운영됩니다. 

소프트웨어는 효율성을 높여 비용을 절감할 뿐만 아니라 마케팅 담당자들이 성공적인 브랜드를 구축할 수 있게 함으로써 최고의 성장을 이끌어 낼 수 있습니다. 소비자들은 단순히 상품화된 제품을 사기 위한 것이 아니라 경험을 원하고 있습니다. 마케터들은 기술을 사용하여 올바른 컨텐츠를 적절한 소비자와 연결하여 최종 소비자와 평생의 유대를 형성할 수 있도록 할 수 있습니다.

## 현상 유지가 너무 느림

온라인 매출액이 연간 1억 달러에 달하는 대부분의 기업은 상품 출시가 너무 늦습니다. 출시는 매 분기마다 한 번씩 발생하며 가동 중지 시간이 필요합니다. 종종 팀 전체가 주말에 와야합니다. 

기업은 소프트웨어를 중심으로 사업 방향을 재조정하는 방법을 여전히 학습하고 있습니다. 최근까지 상거래는 조직의 주변부에서 벌어지는 IT에 의한 비용으로 간주되었습니다.

다양한 문제에 대해 살펴 보겠습니다.

### IT가 최소화 해야 할 비용으로 간주 됩니다

많은 기업들이 여전히 IT를 비즈니스가 아닌 비용으로 보고 있습니다. 업무는 IT로 이루어지지만 비즈니스의 원동력이 아니라 단순한 계산기로서 취급 됩니다. 업무가 시스템 통합 업체에 발주되면 가장 저렴한 비용으로 종종 입찰 됩니다.  소프트웨어와 서비스는 종종 중앙 집중식으로 조달되며 전체 기업은 적합성과 상관없이 동일한 기술 스택을 사용해야합니다. 비용을 최소화 하려는 이러한 문화는 IT가 비즈니스 자체보다는 비즈니스의 주변부에 있을 때부터 발생합니다.

### 조직 구조

> 시스템을 설계하는 (광범위하게 정의된) 어느 조직이든 그 조직의 통신 구조를 그대로 복제한 디자인을 만들어 냅니다. - Mel Conway (1968)

마이크로서비스가 "해킹 콘웨이의 법칙(Hacking Conway's Law)" 이라고 종종 불리우는 데는 그의 독창적인 논문에서 나온 콘웨이의 유명한 관찰이 마이크로서비스에서 매우 중요했습니다.

![그림 1-1. 기업 내에서 일반적인 수평 중심의 전문화](https://raw.githubusercontent.com/l4zyg33k/Microservices4ModernCommerce/master/figures/fig1-1.png)

그림 1-1. 기업 내에서 일반적인 수평 중심의 전문화

각 팀마다 고유 한 작업 위치, 작업 수신 프로세스(일반적으로 일종의 발권 시스템), 서비스 수준 계약, 개인에게 작업 할당 프로세스, 릴리스 주기 등이 있습니다. 이러한 엄격한 분리로 인해 여러 팀에 걸쳐 변경 작업을 수행 하기가 어렵습니다. 예를 들어, Java 개발자가 고객의 신발 크기를 캡처하기 위한 요구 사항을 받고 등록합니다. 일반적인 기업의 경우 유능한 개발자가 수행하는 데 약 2분이 걸리는 일임에도 엄청나게 어려운 작업 입니다. 다음이 작업을 수행하는 데 필요한 일련의 단계 목록 입니다.

1. Java 개발자가 요구 사항을 받습니다.
1. Java 개발자가 DBA의 티켓 시스템을 사용하여 티켓을 제출 합니다.
1. DBA 팀은 작업 지시서를 받고, 우선 순위를 정하고 일감을 할당합니다.
1. DBA는 작업 순서에 따라 데이터베이스에 열을 추가 합니다.
1. DBA가 티켓을 업데이트 하고 Java 개발자의 티켓 화면에 올바르게 추가된 것으로 보이는지 확인 합니다.
1. Java 개발자는 데이터베이스에 로그인하여 올바르게 추가 되었는지 확인합니다.
1. Java 개발자는 열이 올바르게 추가 되었고 변경 사항이 적용 될 수 있음을 나타내는 티켓을 갱신합니다.
1. Java 개발자는 다음 데이터베이스 빌드를 기다립니다.
1. Java 개발자는 객체 관계형 매핑 시스템을 업데이트하여 데이터베이스의 새 열을 찾습니다.
1. Java 개발자가 등록 API를 업데이트하여 생년월일을 포함시킵니다.

이러한 단계는 읽는 것만으로도 힘이 들지만, 사소한 변경 사항이 기업에서 구현되는 방식입니다. 이 단계에는 UI 업데이트가 포함되지 않습니다. 관료제화 된 수평적으로 전문화 된 팀으로 인해 릴리즈가 분기별로 이루어 지기도 합니다. 

규모가 크고 고립된 팀일 수록 불신의 문화를 형성됩니다. 팀이 문제가 발생할 경우 함께 일하는 것을 추구하기 보다는 더 많은 관료제(변경 요청, 아키텍처 검토 패널, 변경 제어 보드 등)를 설치하는 동기가 됩니다.

### 결합

오늘날의 기업은 조직과 아키텍처면에서 극단적인 결합을 특징으로합니다.

조직부터 시작하겠습니다.

기업은 하나의 포커스만 가진 팀을 구성하기 때문에 수평 레이어 간에 매우 밀접한 결합을 일으킵니다. 예를 들어, 각 사용자 인터페이스(판매 시점, 웹, 모바일, 키오스크 등)에는 자체 팀이 있습니다. 이러한 UI는 각각 별도의 팀이 소유한 하나 이상의 응용 프로그램과 밀접하게 결합됩니다. 종종 여러 응용 프로그램을 하나로 묶는 통합 팀이 있습니다. 그런 다음 모든 팀이 완전히 의존하는 데이터베이스가 있습니다. 인프라는 또 다른 팀에 의해 관리됩니다. 각 팀은 의심의 여지없이 자신이하는 일에만 능숙합니다. 그러나 이러한 장벽은 팀간 긴밀한 연결을 야기하며 이로 인해 통신 오버 헤드가 발생하고 지연이 발생합니다.

자동 수리점에 타이어를 주문하는 사람이 한 명 있고, 러그 너트를 풀기위한 다른 사람, 낡은 타이어를 제거하는 사람, 새 타이어의 균형을 잡는 다른 사람, 그것을 장착하는 다른 사람, 그리고 너트에 나사를 조이는 최종 한 사람이 있습니다. 물론 6명의 사람들은 각자 최선을 다하고 있지만 여섯 명의 사람들을 대상으로 한 활동을 조정하는 오버 헤드가 각 단계에서의 효율성 향상 보다는 훨씬 큽니다. 그러나 이것은 오늘날 기업 운영 방식입니다. 과거에는 이러한 레이어가 모두 광범위한 전문 지식을 필요로했기 때문에 이것이 필요했습니다. 예를 들어 네트워킹에는 수십 년의 경험과 실질적인 역량이 필요했습니다. 이제 여기에 설명 된대로 모든 소프트웨어 기반입니다.

```bash
$ docker network create frontend-network
```

더욱 복잡한 문제를 풀기 위해 기업은 너무 많은 코드 공유를 권장합니다. IT는 비용으로 간주되고 코드는 개발 비용이 비싸기 때문에 많은 기업은 개발 팀이 최대한 많은 코드를 재사용하도록 합니다. 예를 들어, 기업 내 팀이 새로운 OAuth 클라이언트를 구축하여 비용 절감의 일환으로 기업 내의 다른 팀에 강제로 적용된다고 가정 해 보겠습니다. 현재의 라이브러리가 강제 된 모든 팀은 OAuth 클라이언트를 만든 팀에 확고한 의존성을 가지고 있습니다. 이전에는 존재하지 않았던 팀간에 긴밀한 결합이 이루어졌습니다. 일반적인 엔터프라이즈 응용 프로그램에는 수백 개의 공유 라이브러리가 있어 종속성 웹을 만들 수 있습니다. 시간이 지남에 따라 복잡한 미궁으로 빠져들게 됩니다. 모든 사람이 모든 시스템을 망칠 수 있기 때문에 모든 것을 만지는 것이 두렵습니다.

아키텍처는 더 많은 결합이 도입 됩니다. 기업은 ERP, CRM, WMS, OMS, CMS 등과 같은 대규모 단일 애플리케이션을 보유하고 있습니다. 이러한 대규모 단일 응용 프로그램은 종종 많은 다른 끝점을 노출하지만 끝점은 종종 독립적으로 이용 할 수 없습니다. 끝점은 특정 순서로 호출 되어야 하며 특정 데이터를 제공 해야 합니다. 이러한 단일 응용 프로그램은 엔터프라이즈 서비스 버스를 사용하여 서로 연결되어 있으며 이러한 버스에 많은 비즈니스 논리가 있습니다. 대형 단일 응용 프로그램의 이러한 긴밀한 결합으로 인해 모든 단일 응용 프로그램을 원자 단위로 테스트하고 릴리스합니다. 하나의 단일 응용 프로그램의 끝점을 변경하면 이를 이용 할 수 있는 다른 단일 응용 프로그램에서 광범위한 결과가 발생할 수 있습니다.

극단적인 결합의 또 다른 방법은 언제든지 한 버전의 응용 프로그램의 버전에 적용되는 것입니다. 한 회사가 단일 상거래 응용 프로그램의 3.2 버전을 운영 환경에 배포 한다고 가정 합니다. 웹 사이트, iOS, Android, 키오스크 및 챗봇 클라이언트는 모두 해당 응용 프로그램의 버전 3.2에 맞도록 코딩되어 있습니다. 회사에서 상거래 응용 프로그램의 버전 4를 배포하면 어떻게 될까요? 버전 3.2로 코딩 된 모든 클라이언트가 사용 할 수 없을 것입니다. 하나의 응용 프로그램 버전만 배포해야 한다면 극단적으로 결합된 단일 애플리케이션과 모든 클라이언트를 동시에 업데이트 해야합니다.

조직 구조 및 아키텍처 선택에 의해 도입된 극단적인 결합은 하나의 주요 결과 - 속도 저하를 가져옵니다.

### 패키지 애플리케이션

오늘날의 많은 엔터프라이즈 응용 프로그램은 소수의 대규모 소프트웨어 공급 업체에서 구입하여 온-프레미스 환경에 배포되고 많이 사용자 지정된 대규모의 단일 패키지 응용 프로그램입니다. 많은 패키지 상거래 응용 프로그램에는 수 백만 줄의 커스터마이징 된 코드가 있습니다.

이러한 응용 프로그램은 수천 명의 고객에게 판매됩니다. 수천 명의 고객은 각각 응용 프로그램 위에 수백만 줄의 커스터마이징 된 코드를 작성합니다. 고객 수가 증가함에 따라 소프트웨어를 판매하는 공급 업체는 모든 문제를 발생 시켜서 변경 작업을 수행하지 못하고 있습니다. 제품의 성공률이 높을수록 느리게 진행됩니다. 시간이 지나면 얼어 붙게 됩니다.

## (실제로) 옴니 채널은 미래 입니다

옴니 채널은 소매업의 미래입니다. 오늘날의 최고의 리더들은 그것을 마스터 했지만, 대다수의 소매업자는 아직 그것을 채택하지 못했습니다.

최종 소비자에게, 옴니 채널이란 브랜드와 상호 작용하는 방식에 관계없이 브랜드와 일관된 경험을 갖는 것을 의미합니다. 웹 사이트, 모바일 장치, 웨어러블 장치 또는 매장을 통하든 경험은 동일하며 통합되어 있습니다.

> 웹은 죽었습니다. 하지만, 인터넷은 오래도록 살아 있을 것 입니다. - Chris Anderson과 Michael Wolff, 2010년 8월 17일

"e커머스"에서 "e"를 빼도 별반 다를 것이 없어야 합니다. 소비자는 온라인으로 구매하고, 매장에서 반품하거나 반납하고, 매장에서 쇼핑하고, 온라인으로 구매할 수 있어야하며, 동일한 프로모션에 접근 할 수 있어야 합니다. 채널이 서로 다른 데이터(제품의 하위 집합, 가격 차이 등)를 제공하는 경우 각 채널에 대한 경험이 최적화 되었거나 가격을 차별 할 수 있는 기회가 있어야 하기 때문입니다.

기술자들에게 옴니 채널은 각 기능의 작은 부분(가격 책정, 판촉, 제품, 재고품 등)에 대해 하나의 백엔드 시스템을 보유하고, UI는 어느 정도 일회성으로서 있을 수 있음을 의미합니다. UI 개발자는 그림 1-2에서와 같이 명확하게 정의 된 API (대개 HTTP + REST)를 단일 응용 프로그램으로 구성 할 수있는 커다란 카탈로그를 얻습니다.

![그림 1-2. 진정한 옴니 채널 - 각 비즈니스 기능에 대해 단일한 시스템에서 관리하고 일회성의 UI를 가집니다](https://raw.githubusercontent.com/l4zyg33k/Microservices4ModernCommerce/master/figures/fig1-2.png)

그림 1-2. 진정한 옴니 채널 - 각 비즈니스 기능에 대해 단일한 시스템에서 관리하고 일회성의 UI를 가집니다.

다시 말하지만, IT의 파편화된 결과로 채널이 다양한 것이 아니라 고의적인 변화 입니다.

오늘날의 기업 상거래 플랫폼의 대부분은 오래된 매장 내 소매 플랫폼의 보조적인 역활 입니다. 모바일과 같은 다른 채널의 상거래 플랫폼 위에 추가로 있을 수 있습니다. 이러한 각 시스템은 그림 1-3에서와 같이 오래된 매장 내 소매 플랫폼으로의 통합이 심한 미니 시스템으로 작동합니다.

각 시스템에는 최종 시스템과 조정될 수도 있고 그렇지 않을 수도있는 가격 책정, 판촉, 제품, 재고 등의 자체적인 관점이 있습니다. 예를 들어 많은 소매 업체는 웹 전용 가격 책정, 판촉, 제품, 재고품 등을 보유하고 있습니다.

![그림 1-2. 일반적인 상거래 응용 프로그램 - 레거시의 백엔드 시스템(ERP, CRM 등)과 밀접하게 결합 된 대형 단일 응용 프로그램](https://raw.githubusercontent.com/l4zyg33k/Microservices4ModernCommerce/master/figures/fig1-3.png)

그림 1-3. 일반적인 상거래 응용 프로그램 - 레거시의 백엔드 시스템(ERP, CRM 등)과 밀접하게 결합 된 대형 단일 응용 프로그램

이 접근 방식은 실제 매장과 웹 사이트가 있는 경우에 적절하게 작동 했습니다. 하지만, 지금은 수백 개 또는 수십 개의 채널이 있습니다. 오래된 접근법은 더 이상 확장성이 없습니다. 사고 실험으로 Amazon.com을 하나의 단일 응용 프로그램으로 하나의 큰 EAR 파일로 배포 할 수 있겠습니까? 아뇨. 그것에 대해 생각하는 것은 미친 짓입니다. 그러나, 아마존 닷컴을 따라 잡으려는 소매 업체들은 처음부터 옴니 채널을 구현한 사람들과 동일한 민첩성으로 새로운 기능을 출시 할 수 있을 것이라 기대하면서 대규모 단일애플리케이션을 정기적으로 배포 합니다. Amazon.com은 2006년부터 마이크로서비스를 유용하게 사용했습니다. 현재 수십 개의 UI를 부분을 위한 수천 개의 개별적인 마이크로서비스가 있습니다.

다행히도, 더 좋은 방법이 있습니다 ....
