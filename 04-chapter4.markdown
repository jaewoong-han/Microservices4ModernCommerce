# 외부 아키텍처

외부 아키텍처는 마이크로 서비스 사이의 공간이며 가장 어려운 부분입니다. 이 책에서 지적했듯이, 마이크로 서비스는 내부의 복잡성에서 외부의 복잡성으로의 전환입니다.
대체로 마이크로 서비스의 외부 아키텍처는 개별 마이크로 서비스 간의 공간입니다. 개별 마이크로 서비스 팀의 책임이 아닌 것으로 생각하십시요.
외부 아키텍처에는 개별 마이크로 서비스가 배포되는 모든 인프라가 포함되며 마이크로 서비스를 찾고 연결하며 새로운 버전의 마이크로 서비스를 출시하고 마이크로 서비스 간 통신 및 보안을 제공합니다.
이것은 넒은 영역이며 복잡해 질수 있습니다.

외부 아키텍처는 최고의 프로그래머로 구성된 팀에서 가장 잘 처리 됩니다.
큰팀은 필요하지 않으며 정말 똑똑한 사람들로 구성된 작은 팀이 필요합니다.

```xml
 팀이 조직될때 체스의 그랜드 마스터를 이길만한큼 똑똑한 8살 짜리 아이들은 없다.
                                                           -Scott Alexander, 2015 
```

 당신이 세워야 할 목표는 각 마이크로 서비스 팀이 자체 마이크로 서비스에 집중할수 있도록 해주는 것입니다.


외부 아키텍처를 복잡하게 만드는 대부분은 새로운 기술 입니다.
 "마이크로 서비스(Micro Service)"라는 용어는 2013년 까지 널리 사용되진 않았습니다.
반면 내부 아키텍처를 지원하는 기술은 널리 확립되었습니다.
결국, 개별 마이크로 서비스는 단지 작은 응용프로그램입니다.


## 소프트 기반 인프라(Software-Based Infrastructure)

각 마이크로 서비스 팀은 자체 프로그래밍 언어, 런타임, 데이터 저장소 및 기타 상위 스택 요소를 선택할 수 있지만 모든 팀은 동일한 클라우드 공급자를 사용해야합니다.
  오늘날 주요 클라우드 플랫폼은 기술 및 상업 기능 측면에서 모두 "충분 함"입니다.

동일한 클라우드 공급자를 사용함에 있어 첫 번째 주요 이점은 여러 팀이 메시징, API 게이트웨이 및 서비스 검색과 같은 동일한 공유 리소스에 액세스 할 수 있다는 것입니다.
각 팀마다 독립적으로 선택할 수있는 기능이 있지만 일반적으로 팀 간 표준화를 원합니다. 
예를 들어, 메시징 시스템이 있는데 100 개의 다른 팀이 각각의 메시징 스택을 사용하고 싶지 않을 것입니다.
대신 중앙 집중식 팀은 하나의 구현을 선택하고 모든 마이크로 서비스 팀이 이 구현을 사용하게 해야 합니다. 이 수준에서 조각화하는 것은 의미가 없으므로 구현하기가 어렵습니다.
동일한 구현을 사용하는 모든 사람의 장점은 대기 시간이 거의 0이되는 경향이 있다는 것입니다.


## 컨테이너 오케스트레이션(Container Orchestration)

__tip)컨테이너 오케스트레이션 정의__  
오늘날의 개발에서, 애플리케이션은 더 이상 하나의 통일체가 아니라 특정 애플리케이션이 설계 의도대로 기능하도록 함께 작동해야 하는 수십 또는 수백 개의 느슨하게 결합되고 컨테이너화된 요소로 구성됩니다. 컨테이너 오케스트레이션은 개별 구성 요소와 애플리케이션 계층의 작업을 정리하는 과정을 의미합니다.

컨테이너는 개별 팀이 내부 아키텍처의 일부로 자체 마이크로 서비스를 구축하고 배포하는 데 사용됩니다.
컨테이너 오케스트레이션은 마이크로 서비스의 외부 아키텍처입니다.

간단히 말해서, 컨테이너 오케스트레이션은 물리적 호스트 또는 가상 호스트에서 개별 컨테이너를 실행하는 시스템입니다. 커맨드 라인에서 소수의 컨테이너를 관리하는 것은 매우 간단합니다. 서버로 SSH 연결하고, Docker를 설치하고, 컨테이너 이미지를 실행하고, 응용 프로그램의 호스트 / 포트를 노출합니다.  
단순하지만  몇 개이상의 컨테이너 이상에서는 작동하지 않습니다.
당신은 아마 수백, 수천개의 마이크로 서비스를 가지고 있을수 있습니다.
또한 각 마이크로 서비스는 다양한 버전과 여러 인스턴스를 포함할수도 있습니다. 하지만 이 마이크로 서비스들은 확장할 수 없습니다.

이 시스템은 또한 다음과 같은 일을 담당 할 수 있습니다.
	• 새로운 버전의 코드 릴리스  
	• 준비 환경에 코드 배포  
	• 모든 통합 테스트 실행  
	• 프로덕션 환경에 코드 배포  
	• 서비스 레지스트리 - 마이크로 서비스 검색 및 라우팅  
	• 가장 좋은 인스턴스에 대한 호출자  
	• 로드 밸런싱 - 노드 내 및 여러 노드 간로드 균형 조정  
	• 네트워킹 오버레이 네트워크 및 동적 방화벽  
	• 자동 크기 조절 - 부하를 처리하는 컨테이너 추가 및 빼기  
	• 스토리지 - 컨테이너에 기존 볼륨 생성 및 연결  
	• 보안 - 식별, 인증 및 인증  

각각의 주제에 대해서는 다음절에서 더 자세히 다루겠습니다.

컨테이너 오케스트레이션은 기본적으로 마이크로 서비스와 함께 사용되는 새로운 형태의 플랫폼 서비스 (PaaS)입니다.
컨테이너 자체는 컨테이너 오케스트레이션 시스템이 관리하는 요소가 되어 매우 유연합니다.
컨테이너에 원하는 것을 넣을 수 있습니다. 전통적으로, PaaS는 엄격히 규정된 방법으로 접근하기 때문에 "독단적인 것"으로 간주됩니다.

 반면 컨테이너 오케스트레이션 시스템은 매우 덜 독단적이며 유연합니다.
유연성 이외에 인프라 활용도는 컨테이너 오케스트레이션 채택의 가장 중요한 요소입니다. 클라우드 환경에서도 VM (Virtual Machine)은 고정 된 CPU와 메모리를 가지고있는 반면, 단일 호스트에 배포 된 여러 컨테이너는 CPU와 메모리를 공유합니다.
컨테이너 오케스트레이션 시스템은 각 호스트 (실제 또는 가상)가 무리하지 않게 일하도록  보장합니다. 사용률은 90 % 또는 95 %로 유지되는 반면 VM은 일반적으로 10 %가 사용됩니다.
호스트의 사용률이 거의 100 %에 도달하면 컨테이너를 죽이고 사용률이 적은 다른 호스트에서 다시 시작할 수 있습니다.
